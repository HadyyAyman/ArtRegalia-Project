<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Table with Pagination, Sorting, and Hover Effects</title>
    <link href="https://fonts.googleapis.com/css2?family=Comfortaa&display=swap" rel="stylesheet">

</head>
<body>

<div class="table-container">
    <div class="controls">
        <div>
            Show
            <select id="entries-select" onchange="changeEntries()">
                <option value="5">5</option>
                <option value="10" selected>10</option>
                <option value="25">25</option>
            </select>
            entries
        </div>
        <div>
            Search: <input type="text" id="search-input" onkeyup="searchTable()">
        </div>
    </div>
    <table id="category-table">
        <thead>
            <tr>
                <th>Category ID <button onclick="sortTable('id')">↕</button></th>
                <th>Category Name <button onclick="sortTable('name')">↕</button></th>
                <th>Parent ID <button onclick="sortTable('parentId')">↕</button></th>
                <th>Parent Name <button onclick="sortTable('parentName')">↕</button></th>
                <th>Category Type <button onclick="sortTable('type')">↕</button></th>
            </tr>
        </thead>
        <tbody id="table-body">
            <!-- Table data will be inserted here by JavaScript -->
        </tbody>
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination" id="pagination">
            <!-- Pagination buttons will be inserted here by JavaScript -->
        </ul>
    </nav>
</div>

<script>
    const data = [
        { id: 1, name: "Street Artist", parentId: "", parentName: "", type: "artist" },
        { id: 5, name: "Portrait Artists", parentId: "", parentName: "", type: "artist" },
        { id: 6, name: "Bags", parentId: "", parentName: "", type: "craftsmen" },
        { id: 7, name: "Bracelets", parentId: "", parentName: "", type: "craftsmen" },
        { id: 8, name: "Home Decor", parentId: "", parentName: "", type: "craftsmen" },
        { id: 9, name: "macramé", parentId: 6, parentName: "Bags", type: "craftsmen" },
        { id: 10, name: "Beaded", parentId: 6, parentName: "Bags", type: "craftsmen" },
        { id: 11, name: "Leather", parentId: 6, parentName: "Bags", type: "craftsmen" },
        { id: 12, name: "Canvas", parentId: 6, parentName: "Bags", type: "craftsmen" },
        { id: 13, name: "macramé", parentId: 7, parentName: "Bracelets", type: "craftsmen" },
        { id: 14, name: "Woodwork", parentId: "", parentName: "", type: "craftsmen" },
        { id: 15, name: "Pottery", parentId: "", parentName: "", type: "craftsmen" },
        { id: 16, name: "Sculpture", parentId: "", parentName: "", type: "artist" },
        { id: 17, name: "Metalwork", parentId: "", parentName: "", type: "craftsmen" },
        { id: 18, name: "Painting", parentId: "", parentName: "", type: "artist" },
        { id: 19, name: "Drawing", parentId: "", parentName: "", type: "artist" },
        { id: 20, name: "Jewelry", parentId: "", parentName: "", type: "craftsmen" },
        { id: 21, name: "Ceramics", parentId: "", parentName: "", type: "craftsmen" },
        { id: 22, name: "Glasswork", parentId: "", parentName: "", type: "craftsmen" },
        { id: 23, name: "Digital Art", parentId: "", parentName: "", type: "artist" }
    ];

    let current_page = 1;
    let entries_per_page = 10;
    let filtered_data = data;
    let sort_order = { column: null, ascending: true };

    function renderTable(data, page = 1, entries = 10) {
        const tableBody = document.getElementById('table-body');
        tableBody.innerHTML = "";

        const start = (page - 1) * entries;
        const end = start + entries;
        const paginatedItems = data.slice(start, end);

        for (const item of paginatedItems) {
            const rowClass = item.id % 2 !== 0 ? 'odd-row' : '';
            const row = `
                <tr class="${rowClass}">
                    <td>${item.id}</td>
                    <td>${item.name}</td>
                    <td>${item.parentId}</td>
                    <td>${item.parentName}</td>
                    <td>${item.type}</td>
                </tr>
            `;
            tableBody.innerHTML += row;
        }

        renderPagination(data.length, entries, page);
    }

    function renderPagination(totalItems, entriesPerPage, currentPage) {
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = "";

        const totalPages = Math.ceil(totalItems / entriesPerPage);

        const prevButton = document.createElement('li');
        prevButton.classList.add('page-item');
        prevButton.classList.toggle('disabled', currentPage === 1);
        prevButton.innerHTML = `<a class="page-link" href="#" tabindex="-1">Previous</a>`;
        prevButton.onclick = (e) => {
            e.preventDefault();
            if (currentPage > 1) {
                changePage(currentPage - 1);
            }
        };
        pagination.appendChild(prevButton);

        for (let i = 1; i <= totalPages; i++) {
            const pageItem = document.createElement('li');
            pageItem.classList.add('page-item');
            pageItem.classList.toggle('active', i === currentPage);
            pageItem.innerHTML = `<a class="page-link" href="#">${i}</a>`;
            pageItem.onclick = (e) => {
                e.preventDefault();
                changePage(i);
            };
            pagination.appendChild(pageItem);
        }

        const nextButton = document.createElement('li');
        nextButton.classList.add('page-item');
        nextButton.classList.toggle('disabled', currentPage === totalPages);
        nextButton.innerHTML = `<a class="page-link" href="#">Next</a>`;
        nextButton.onclick = (e) => {
            e.preventDefault();
            if (currentPage < totalPages) {
                changePage(currentPage + 1);
            }
        };
        pagination.appendChild(nextButton);
    }

    function sortTable(column) {
        if (sort_order.column === column) {
            sort_order.ascending = !sort_order.ascending;
        } else {
            sort_order.column = column;
            sort_order.ascending = true;
        }

        filtered_data.sort((a, b) => {
            if (a[column] < b[column]) return sort_order.ascending ? -1 : 1;
            if (a[column] > b[column]) return sort_order.ascending ? 1 : -1;
            return 0;
        });

        renderTable(filtered_data, current_page, entries_per_page);
    }

    function changePage(page) {
        current_page = page;
        renderTable(filtered_data, current_page, entries_per_page);
    }

    function changeEntries() {
        const entriesSelect = document.getElementById('entries-select');
        entries_per_page = parseInt(entriesSelect.value);
        current_page = 1; // Reset to first page
        renderTable(filtered_data, current_page, entries_per_page);
    }

    function searchTable() {
        const searchInput = document.getElementById('search-input').value.toLowerCase();
        filtered_data = data.filter(item => 
            item.name.toLowerCase().includes(searchInput) || 
            item.type.toLowerCase().includes(searchInput)
        );
        current_page = 1; // Reset to first page
        renderTable(filtered_data, current_page, entries_per_page);
    }

    window.onload = () => {
        renderTable(filtered_data, current_page, entries_per_page);
    }
</script>

</body>
</html>
